Brew install node

### create new role/user cc
pg_ctl -D /usr/local/var/postgres start
psql postgres
create role cc with login password 'cc';
psql postgres -U cc -W
(Input pwd)
postgres=# \du
                                   List of roles
 Role name |                         Attributes                         | Member of
-----------+------------------------------------------------------------+-----------
 cc        |                                                            | {}
 yingcai   | Superuser, Create role, Create DB, Replication, Bypass RLS | {}
ALTER ROLE cc Superuser; 
\du

### create new db 
psql postgres -U cc
create database todoapp_development;
\list
                                List of databases
        Name         |  Owner  | Encoding | Collate | Ctype |  Access privileges
---------------------+---------+----------+---------+-------+---------------------
 postgres            | yingcai | UTF8     | C       | C     |
 template0           | yingcai | UTF8     | C       | C     | =c/yingcai         +
                     |         |          |         |       | yingcai=CTc/yingcai
 template1           | yingcai | UTF8     | C       | C     | =c/yingcai         +
                     |         |          |         |       | yingcai=CTc/yingcai
 test                | yingcai | UTF8     | C       | C     |
 todoapp_development | cc      | UTF8     | C       | C     |
(5 rows)

\c todoapp_development
\dt 
       List of relations
 Schema | Name  | Type  | Owner
--------+-------+-------+-------
 public | todos | table | cc
(1 row)

SQLAlchemy is a ORM, psycopg2 is a database driver. These are completely different things: 
SQLAlchemy generates SQL statements and psycopg2 sends SQL statements to the database. 
SQLAlchemy depends on psycopg2 or other database drivers to communicate with the database!


export FLASK_DEBUG=true

Transaction

### migrate
Flask db stamp head
Flask db migrate
Fix /444acfcfde78_.py
Flask db upgrade


### issue
1/ todo_id

### pj1
127.0.0.1= local IP
5000= 端口号 flask程序
1/ write info to db
db.create_all()

### pj1 code review
1/ virtual env
conda create -name trivia_api python=3.7.4 (otherwise use /usr/bi/python)
Requirement.txt
2/ module
CSRFProtect
Endpoints


### pj2
Jupiter/ bash run.sh not using virtual env
unitest backend
# ran 0 tests
Run flask first (bash run.sh)
python test_flaskr.py

# postman 

# anaconda virtual env, vc code not using env
https://blog.csdn.net/liubingjun07/article/details/88833885

# http code
https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status

# endpoint

